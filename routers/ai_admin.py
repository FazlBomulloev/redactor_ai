from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.repositories.ai_config import AIApiKeyRepository, AIAgentRepository
from utils.adm import super_adm
from utils.ai_manager import ai_manager

ai_admin_router = Router()
api_key_repo = AIApiKeyRepository()
agent_repo = AIAgentRepository()


class AIApiKeyStates(StatesGroup):
    name = State()
    api_key = State()
    description = State()


class AIAgentStates(StatesGroup):
    name = State()
    agent_id = State()
    description = State()
    api_key_id = State()


@ai_admin_router.callback_query(F.data == "ai_management")
async def ai_management_menu(callback_query: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò"""
    try:
        if callback_query.from_user.id not in super_adm:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
            return
        
        kb = InlineKeyboardBuilder()
        btn_api_keys = InlineKeyboardButton(text="üîë API –ö–ª—é—á–∏", callback_data="ai_api_keys")
        btn_agents = InlineKeyboardButton(text="ü§ñ –ò–ò –ê–≥–µ–Ω—Ç—ã", callback_data="ai_agents")
        btn_reload = InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="ai_reload_config")
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="administration")
        
        kb.row(btn_api_keys)
        kb.row(btn_agents)
        kb.row(btn_reload)
        kb.row(btn_back)
        
        await callback_query.message.edit_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:", 
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data == "ai_reload_config")
async def reload_ai_config(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò"""
    try:
        if callback_query.from_user.id not in super_adm:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        await ai_manager.reload_configuration()
        
        kb = InlineKeyboardBuilder()
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ai_management")
        kb.row(btn_back)
        
        await callback_query.message.edit_text(
            "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï API –ö–õ–Æ–ß–ê–ú–ò ==========

@ai_admin_router.callback_query(F.data == "ai_api_keys")
async def ai_api_keys_menu(callback_query: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏"""
    try:
        api_keys = await api_key_repo.get_all_with_agents()
        
        kb = InlineKeyboardBuilder()
        
        if api_keys:
            for key in api_keys:
                agent_count = len(key.agents) if key.agents else 0
                btn = InlineKeyboardButton(
                    text=f"{key.name} ({agent_count} –∞–≥–µ–Ω—Ç–æ–≤)",
                    callback_data=f"ai_key_detail_{key.id}"
                )
                kb.row(btn)
        
        btn_add = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="ai_add_api_key")
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ai_management")
        
        kb.row(btn_add)
        kb.row(btn_back)
        
        text = f"üîë API –ö–ª—é—á–∏ ({len(api_keys)} —à—Ç.):\n\n"
        if not api_keys:
            text += "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π."
        
        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data == "ai_add_api_key")
async def add_api_key_start(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞"""
    try:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è API –∫–ª—é—á–∞:")
        await state.set_state(AIApiKeyStates.name)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.message(AIApiKeyStates.name)
async def add_api_key_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è API –∫–ª—é—á–∞"""
    try:
        await state.update_data(name=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á:")
        await state.set_state(AIApiKeyStates.api_key)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.message(AIApiKeyStates.api_key)
async def add_api_key_key(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞"""
    try:
        await state.update_data(api_key=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(AIApiKeyStates.description)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.message(AIApiKeyStates.description)
async def add_api_key_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞"""
    try:
        data = await state.get_data()
        description = message.text.strip() if message.text.strip() != "-" else ""
        
        await api_key_repo.add(
            name=data['name'],
            api_key=data['api_key'], 
            description=description
        )
        
        kb = InlineKeyboardBuilder()
        btn_back = InlineKeyboardButton(text="–ö API –∫–ª—é—á–∞–º", callback_data="ai_api_keys")
        kb.row(btn_back)
        
        await message.answer(
            f"‚úÖ API –∫–ª—é—á '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=kb.as_markup()
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_key_detail_"))
async def api_key_detail(callback_query: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ API –∫–ª—é—á–∞"""
    try:
        key_id = int(callback_query.data.split("_")[3])
        api_keys = await api_key_repo.get_all_with_agents()
        api_key = next((k for k in api_keys if k.id == key_id), None)
        
        if not api_key:
            await callback_query.message.answer("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        kb = InlineKeyboardBuilder()
        
        btn_delete = InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"ai_key_delete_confirm_{key_id}"
        )
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ai_api_keys")
        
        kb.row(btn_delete)
        kb.row(btn_back)
        
        masked_key = api_key.api_key[:8] + "..." + api_key.api_key[-4:]
        agent_count = len(api_key.agents) if api_key.agents else 0
        
        text = f"üîë API –ö–ª—é—á: {api_key.name}\n\n"
        text += f"–ö–ª—é—á: {masked_key}\n"
        text += f"–ê–≥–µ–Ω—Ç–æ–≤: {agent_count}\n"
        if api_key.description:
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {api_key.description}\n"
        
        if api_key.agents:
            text += f"\nü§ñ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:\n"
            for agent in api_key.agents:
                text += f"‚Ä¢ {agent.name}\n"
        
        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_key_delete_confirm_"))
async def delete_api_key_confirm(callback_query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞"""
    try:
        key_id = int(callback_query.data.split("_")[4])
        api_key = await api_key_repo.select_id(key_id)
        
        if not api_key:
            await callback_query.message.answer("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        kb = InlineKeyboardBuilder()
        btn_confirm = InlineKeyboardButton(
            text="‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"ai_key_delete_{key_id}"
        )
        btn_cancel = InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"ai_key_detail_{key_id}"
        )
        
        kb.row(btn_confirm)
        kb.row(btn_cancel)
        
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á '{api_key.name}'?\n\n"
            "‚ùó –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –í–°–ï –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã!\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_key_delete_"))
async def delete_api_key(callback_query: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞"""
    try:
        key_id = int(callback_query.data.split("_")[3])
        await api_key_repo.delete_key(key_id)
        
        kb = InlineKeyboardBuilder()
        btn_back = InlineKeyboardButton(text="–ö API –∫–ª—é—á–∞–º", callback_data="ai_api_keys")
        kb.row(btn_back)
        
        await callback_query.message.edit_text(
            "‚úÖ API –∫–ª—é—á –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò ==========

@ai_admin_router.callback_query(F.data == "ai_agents")
async def ai_agents_menu(callback_query: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏"""
    try:
        agents = await agent_repo.get_all_with_api_keys()
        
        kb = InlineKeyboardBuilder()
        
        if agents:
            for agent in agents:
                api_key_name = agent.api_key.name if agent.api_key else "–ë–µ–∑ –∫–ª—é—á–∞"
                btn = InlineKeyboardButton(
                    text=f"{agent.name} ({api_key_name})",
                    callback_data=f"ai_agent_detail_{agent.id}"
                )
                kb.row(btn)
        
        btn_add = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="ai_add_agent")
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ai_management")
        
        kb.row(btn_add)
        kb.row(btn_back)
        
        text = f"ü§ñ –ò–ò –ê–≥–µ–Ω—Ç—ã ({len(agents)} —à—Ç.):\n\n"
        if not agents:
            text += "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."
        
        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data == "ai_add_agent")
async def add_agent_start(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ - –≤—ã–±–æ—Ä API –∫–ª—é—á–∞"""
    try:
        api_keys = await api_key_repo.select_all()
        if not api_keys:
            await callback_query.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á!")
            return
        
        kb = InlineKeyboardBuilder()
        for key in api_keys:
            btn = InlineKeyboardButton(
                text=key.name,
                callback_data=f"ai_select_api_key_{key.id}"
            )
            kb.row(btn)
        
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ai_agents")
        kb.row(btn_back)
        
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:",
            reply_markup=kb.as_markup()
        )
        await state.set_state(AIAgentStates.api_key_id)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_select_api_key_"))
async def select_api_key_for_agent(callback_query: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä API –∫–ª—é—á–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        api_key_id = int(callback_query.data.split("_")[4])
        await state.update_data(api_key_id=api_key_id)
        
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞:")
        await state.set_state(AIAgentStates.name)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.message(AIAgentStates.name)
async def add_agent_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        await state.update_data(name=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ag:xxx:xxx:xxx:xxx):")
        await state.set_state(AIAgentStates.agent_id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.message(AIAgentStates.agent_id)
async def add_agent_id(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–≥–µ–Ω—Ç–∞"""
    try:
        await state.update_data(agent_id=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(AIAgentStates.description)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.message(AIAgentStates.description)
async def add_agent_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    try:
        data = await state.get_data()
        description = message.text.strip() if message.text.strip() != "-" else ""
        
        await agent_repo.add(
            name=data['name'],
            agent_id=data['agent_id'],
            api_key_id=data['api_key_id'],
            description=description
        )
        
        kb = InlineKeyboardBuilder()
        btn_back = InlineKeyboardButton(text="–ö –∞–≥–µ–Ω—Ç–∞–º", callback_data="ai_agents")
        kb.row(btn_back)
        
        await message.answer(
            f"‚úÖ –ê–≥–µ–Ω—Ç '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=kb.as_markup()
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_agent_detail_"))
async def agent_detail(callback_query: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    try:
        agent_id = int(callback_query.data.split("_")[3])
        agents = await agent_repo.get_all_with_api_keys()
        agent = next((a for a in agents if a.id == agent_id), None)
        
        if not agent:
            await callback_query.message.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        kb = InlineKeyboardBuilder()
        
        btn_delete = InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"ai_agent_delete_confirm_{agent_id}"
        )
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ai_agents")
        
        kb.row(btn_delete)
        kb.row(btn_back)
        
        masked_id = agent.agent_id[:12] + "..." + agent.agent_id[-8:]
        api_key_name = agent.api_key.name if agent.api_key else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        text = f"ü§ñ –ê–≥–µ–Ω—Ç: {agent.name}\n\n"
        text += f"ID: {masked_id}\n"
        text += f"API –ö–ª—é—á: {api_key_name}\n"
        if agent.description:
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {agent.description}\n"
        
        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_agent_delete_confirm_"))
async def delete_agent_confirm(callback_query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        agent_id = int(callback_query.data.split("_")[4])
        agent = await agent_repo.select_id(agent_id)
        
        if not agent:
            await callback_query.message.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        kb = InlineKeyboardBuilder()
        btn_confirm = InlineKeyboardButton(
            text="‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"ai_agent_delete_{agent_id}"
        )
        btn_cancel = InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"ai_agent_detail_{agent_id}"
        )
        
        kb.row(btn_confirm)
        kb.row(btn_cancel)
        
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ '{agent.name}'?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@ai_admin_router.callback_query(F.data.startswith("ai_agent_delete_"))
async def delete_agent(callback_query: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    try:
        agent_id = int(callback_query.data.split("_")[3])
        await agent_repo.delete_agent(agent_id)
        
        kb = InlineKeyboardBuilder()
        btn_back = InlineKeyboardButton(text="–ö –∞–≥–µ–Ω—Ç–∞–º", callback_data="ai_agents")
        kb.row(btn_back)
        
        await callback_query.message.edit_text(
            "‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")