import os
from dotenv import set_key, load_dotenv
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.config import reload_settings
from utils.adm import check_permission, super_adm
from utils.create_keyboard import create_kb
from core.repositories.admin import AdminRepository
from utils.telethon import telegram_client_wrapper
from utils.account_manager import account_manager

ACCOUNTS_DIR = os.path.join(os.getcwd(), "accounts")

repo = AdminRepository()
admin_router = Router()


class Admin(StatesGroup):
    id_adm = State()
    update_channel_link = State()
    add_account = State()


class AccountDelete(StatesGroup):
    confirm_delete = State()


@check_permission("some_permission_field")
async def update_channel_link(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        if user_id not in super_adm:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return

        new_link = message.text.strip()
        if not new_link:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
        load_dotenv()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ .env
        set_key(".env", "CHANNEL__LINK", str(new_link))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        os.environ["CHANNEL__LINK"] = str(new_link)

        await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_link}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "administration")
async def admin_menu(callback_query: CallbackQuery):
    try:
        kb = InlineKeyboardBuilder()
        btn_list = InlineKeyboardButton(
            text="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list"
        )
        btn_add_admin = InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add"
        )
        btn_add_account = InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_add_account"
        )
        btn_accounts_stats = InlineKeyboardButton(
            text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="accounts_stats"
        )
        btn_delete_accounts = InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="delete_accounts_list"
        )
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        
        kb.row(btn_list)
        kb.row(btn_add_admin)
        kb.row(btn_add_account, btn_delete_accounts)
        kb.row(btn_accounts_stats)

        user_id = callback_query.from_user.id
        if user_id in super_adm:
            btn_update_channel = InlineKeyboardButton(
                text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="update_channel_link"
            )
            
            btn_ai_management = InlineKeyboardButton(
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò", callback_data="ai_management"
            )
            kb.row(btn_update_channel)
            kb.row(btn_ai_management)

        kb.row(btn_back)
        await callback_query.message.edit_text("ADMINS", reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "accounts_stats")
async def accounts_stats(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        stats = await account_manager.get_account_stats()
        active_accounts = telegram_client_wrapper.get_account_count()
        current_account = telegram_client_wrapper.current_client_key or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ"
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
        text += f"üìÅ –§–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π: {stats['total_accounts']}\n"
        text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {active_accounts}\n"
        text += f"‚ö° –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç: {current_account}\n\n"
        
        if stats['account_list']:
            text += "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:\n"
            for i, account in enumerate(stats['account_list'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status = "üü¢" if account in telegram_client_wrapper.get_account_list() else "‚ö™"
                text += f"{i}. {account} {status}\n"
                
            if len(stats['account_list']) > 10:
                text += f"... –∏ –µ—â–µ {len(stats['account_list']) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        else:
            text += "‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤"

        kb = InlineKeyboardBuilder()
        btn_refresh = InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="accounts_stats")
        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="administration")
        kb.row(btn_refresh)
        kb.row(btn_back)

        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "delete_accounts_list")
async def delete_accounts_list(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        accounts = telegram_client_wrapper.get_account_list()
        
        if not accounts:
            kb = InlineKeyboardBuilder()
            btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="administration")
            kb.row(btn_back)
            await callback_query.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                reply_markup=kb.as_markup()
            )
            return

        kb = InlineKeyboardBuilder()
        for account in accounts:
            btn = InlineKeyboardButton(
                text=f"üóëÔ∏è {account}", 
                callback_data=f"delete_account_confirm_{account}"
            )
            kb.row(btn)

        btn_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="administration")
        kb.row(btn_back)

        text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("delete_account_confirm_"))
async def delete_account_confirm(callback_query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    try:
        account_name = callback_query.data.replace("delete_account_confirm_", "")
        
        kb = InlineKeyboardBuilder()
        btn_confirm = InlineKeyboardButton(
            text="‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_account_final_{account_name}"
        )
        btn_cancel = InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            callback_data="delete_accounts_list"
        )
        kb.row(btn_confirm)
        kb.row(btn_cancel)

        text = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
        text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç:\n"
        text += f"üì± {account_name}\n\n"
        text += f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        text += f"üóëÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"

        await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("delete_account_final_"))
async def delete_account_final(callback_query: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ - –≤—Ç–æ—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    try:
        account_name = callback_query.data.replace("delete_account_final_", "")
        
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success = await telegram_client_wrapper.remove_account_by_name(account_name)
        
        if success:
            remaining_accounts = telegram_client_wrapper.get_account_count()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            await account_manager.log_to_chat(
                f"üóëÔ∏è Account manually deleted: {account_name} | Remaining: {remaining_accounts}",
                "WARNING"
            )
            
            kb = InlineKeyboardBuilder()
            btn_back_list = InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É", callback_data="delete_accounts_list")
            btn_back_admin = InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω–∫—É", callback_data="administration")
            kb.row(btn_back_list)
            kb.row(btn_back_admin)

            text = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω!\n\n"
            text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {account_name}\n"
            text += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {remaining_accounts}"

            await callback_query.message.edit_text(text, reply_markup=kb.as_markup())
        else:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
            
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "admin_list")
async def admin_list(callback_query: CallbackQuery):
    try:
        adm_list = await repo.select_all()
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞:", reply_markup=await create_kb.create_adm_list(adm_list)
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "admin_add")
async def admin_add_id(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ id:")
        await state.set_state(Admin.id_adm)
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Admin.id_adm)
async def admin_add_status(message: Message, state: FSMContext):
    try:
        await state.update_data(id_adm=message.text)
        data = await state.get_data()
        await repo.add(int(data.get("id_adm")))
        adm = await repo.select_adm_id(int(data.get("id_adm")))
        await message.answer(
            f"–ê–¥–º–∏–Ω —Å id {data.get('id_adm')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞:",
            reply_markup=await create_kb.create_rights(adm),
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("ad_"))
async def admin(callback_query: CallbackQuery):
    try:
        data = callback_query.data.split("_")
        kb = InlineKeyboardBuilder()
        kb.row(
            InlineKeyboardButton(
                text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∞", callback_data=f"show_rights_{data[1]}"
            )
        )
        kb.row(
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_admin_check_{data[1]}"
            )
        )
        kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_list"))

        await callback_query.message.edit_text(
            f"id {data[1]}", reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("show_rights_"))
async def rights(callback_query: CallbackQuery):
    try:
        data = callback_query.data.split("_")
        adm = await repo.select_adm_id(int(data[2]))
        await callback_query.message.edit_reply_markup(
            reply_markup=await create_kb.create_rights(adm)
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("show_redact_"))
async def rights(callback_query: CallbackQuery):
    try:
        data = callback_query.data.split("_")
        if data[2].lower() == "true":
            original_value = True
        elif data[2].lower() == "false":
            original_value = False
        await repo.update(
            adm_id=int(data[3]),
            column=data[4] + ("_" + data[5] if len(data) == 6 else ""),
            new_value=not original_value,
        )
        adm = await repo.select_adm_id(int(data[3]))
        await callback_query.message.edit_reply_markup(
            reply_markup=await create_kb.create_rights(adm)
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("delete_admin_check_"))
async def delete_admin_check(callback_query: CallbackQuery):
    try:
        data = callback_query.data.split("_")
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="–î–∞", callback_data=f"delete_admin_{data[3]}"))
        kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"admin_list"))
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞:", reply_markup=kb.as_markup()
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data.startswith("delete_admin_"))
async def delete_admin(callback_query: CallbackQuery):
    try:
        data = callback_query.data.split("_")
        adm = await repo.delete(int(data[2]))
        adm_list = await repo.select_all()
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞:", reply_markup=await create_kb.create_adm_list(adm_list)
        )
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "update_channel_link")
async def update_channel_link_prompt(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
        await state.set_state(Admin.update_channel_link)
    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Admin.update_channel_link)
async def update_channel_link_handler(message: Message, state: FSMContext):
    try:
        new_link = message.text.strip()
        if not new_link:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
        load_dotenv()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ .env
        set_key(".env", "CHANNEL__LINK", str(new_link))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        os.environ["CHANNEL__LINK"] = str(new_link)
        reload_settings()

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        from utils.shedule import restart_scheduler
        await restart_scheduler()

        await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_link}")
        await state.clear()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "admin_add_account")
async def get_session_file_chat(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Admin.add_account)
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —Ç–µ–ª–µ—Ç–æ–Ω")


@admin_router.message(F.document, Admin.add_account)
async def get_session_file_chat(message: Message):
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if not document.file_name.endswith(".session"):
        await message.answer("‚ö†Ô∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ `.session`.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ accounts, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(ACCOUNTS_DIR, exist_ok=True)

    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    session_path = os.path.join(ACCOUNTS_DIR, document.file_name)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, destination=session_path)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    await account_manager.log_to_chat(
        f"üì± New account added: {document.file_name} | Total files: {len(account_manager.get_account_list())}",
        "SUCCESS"
    )

    await message.answer(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ `{document.file_name}` —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫—É `accounts/`.")