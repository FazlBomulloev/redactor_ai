import logging
import asyncio
from datetime import datetime
from aiogram import Bot
from aiogram.exceptions import TelegramRetryAfter
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤ –º–µ–¥–∏–∞
LOG_CHAT_ID = -1002597796340  # –ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –º–µ–¥–∏–∞
ADMIN_BOT_TOKEN = "8188098148:AAGwioCD56-NmmwCZau1RC6dZXnPOEQP6Fw"

class MediaTelegramHandler(logging.Handler):
    def __init__(self, bot_token, chat_id):
        super().__init__()
        self.bot = Bot(token=bot_token)
        self.chat_id = chat_id
        self.last_send_time = {}
        self.min_interval = 2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
    async def safe_send_log(self, message, max_retries=2):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –º–µ–¥–∏–∞"""
        for attempt in range(max_retries):
            try:
                if len(message) > 4000:
                    message = message[:3900] + "...[cut]"
                    
                await self.bot.send_message(self.chat_id, message)
                return True
            except TelegramRetryAfter as e:
                if attempt < max_retries - 1:
                    await asyncio.sleep(e.retry_after)
                else:
                    return False
            except Exception:
                if attempt < max_retries - 1:
                    await asyncio.sleep(1)
                else:
                    return False
        return False

    def emit(self, record):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –º–µ–¥–∏–∞ –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            current_time = datetime.now().timestamp()
            if record.levelno in self.last_send_time:
                if current_time - self.last_send_time[record.levelno] < self.min_interval:
                    return
            
            self.last_send_time[record.levelno] = current_time
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            level_emoji = {
                logging.INFO: "üì∏",
                logging.WARNING: "‚ö†Ô∏è", 
                logging.ERROR: "‚ùå"
            }
            
            emoji = level_emoji.get(record.levelno, "üìù")
            timestamp = datetime.now().strftime("%H:%M:%S")
            message = f"{emoji} {timestamp} | {record.getMessage()}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            asyncio.create_task(self.safe_send_log(message))
            
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–µ–¥–∏–∞
def setup_media_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–¥–∏–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –º–µ–¥–∏–∞
    media_logger = logging.getLogger("media")
    media_logger.setLevel(logging.INFO)
    media_logger.handlers.clear()
    
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –ª–æ–≥–∏)
    file_handler = logging.FileHandler(
        f"{log_dir}/media_{datetime.now().strftime('%Y%m%d')}.log",
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    file_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)s | %(message)s'
    )
    file_handler.setFormatter(file_formatter)
    
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è Telegram (—Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞)
    telegram_handler = MediaTelegramHandler(ADMIN_BOT_TOKEN, LOG_CHAT_ID)
    telegram_handler.setLevel(logging.INFO)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    media_logger.addHandler(file_handler)
    media_logger.addHandler(telegram_handler)
    
    return media_logger

# –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –ª–æ–≥–≥–µ—Ä
media_logger = setup_media_logging()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
async def log_media_start(message_id, has_media, text_length):
    """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    media_status = "üì∏ WITH MEDIA" if has_media else "üìù TEXT ONLY"
    media_logger.info(f"Processing msg {message_id} | {media_status} | Text: {text_length} chars")

async def log_media_group_found(message_id, group_id, count):
    """–ù–∞–π–¥–µ–Ω–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞"""
    media_logger.info(f"Media group | Msg: {message_id} | Group: {group_id} | Count: {count}")

async def log_media_processing(message_id, total_count, media_types):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    media_logger.info(f"Processing media | Msg: {message_id} | Total: {total_count} | Types: {media_types}")

async def log_media_download(message_id, media_num, media_type, size_mb=None):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞"""
    size_info = f" ({size_mb:.1f}MB)" if size_mb else ""
    media_logger.info(f"Download {media_type} {media_num} | Msg: {message_id}{size_info}")

async def log_media_skip(message_id, media_num, reason):
    """–ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞"""
    media_logger.warning(f"Skip media {media_num} | Msg: {message_id} | Reason: {reason}")

async def log_media_final(message_id, final_count, text_length):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    media_logger.info(f"Final result | Msg: {message_id} | Media: {final_count} | Text: {text_length} chars")

async def log_send_start(channel, text_length, media_count):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    media_logger.info(f"Sending to {channel} | Text: {text_length} chars | Media: {media_count} files")

async def log_send_method(method, count=None):
    """–ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if method == "single_photo":
        media_logger.info("üì∏ Sending single photo with caption")
    elif method == "single_video":
        media_logger.info("üé• Sending single video with caption")
    elif method == "media_group":
        media_logger.info(f"üì∏üé• Sending media group with {count} items")
    elif method == "text_only":
        media_logger.info("üìù Sending text-only message")
    elif method == "fallback_text":
        media_logger.warning("üìù Fallback: sending text after media error")

async def log_send_success(media_count=0):
    """–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    if media_count > 0:
        media_logger.info(f"‚úÖ Media sent successfully | Count: {media_count}")
    else:
        media_logger.info("‚úÖ Text sent successfully")

async def log_send_error(error_msg, media_count=0):
    """–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    context = f"with {media_count} media" if media_count > 0 else "text-only"
    media_logger.error(f"‚ùå Send failed ({context}): {error_msg[:200]}")

async def log_media_error(message_id, error_msg):
    """–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞"""
    media_logger.error(f"‚ùå Media error | Msg: {message_id} | Error: {error_msg[:200]}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def get_media_logger():
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –ª–æ–≥–≥–µ—Ä"""
    return media_logger