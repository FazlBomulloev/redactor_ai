import asyncio
import logging
from datetime import datetime, timezone, timedelta
import time

from aiogram import Bot
from aiogram.exceptions import TelegramRetryAfter
from telethon.tl.types import MessageMediaDocument, DocumentAttributeVideo, BotApp
from telethon.utils import resolve_bot_file_id
from mistralai import Mistral

from core.config import settings, reload_settings
from core.repositories.thematic_block import ThematicBlockRepository
from core.repositories.article import ArticleRepository
from utils.rerate import main_rer
from utils.telethon import TelegramClientWrapper, telegram_client_wrapper

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AccountManager –∏ AI Manager
from utils.account_manager import account_manager
from utils.ai_manager import ai_manager, format_thematic_block_context

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ –º–æ–¥–µ–ª–∏
repo = ThematicBlockRepository()
repo_art = ArticleRepository()

def get_target_chat_id():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π target_chat_id –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from core.config import settings
    return settings.channel__link

target_chat_id_test = -1002597796340

telegramClient = telegram_client_wrapper

api_key = "4nLSiw4wE9hV3zju2lSKl7yF0FhOLjb9"
client_ai = Mistral(api_key=api_key)
MAX_VIDEO_SIZE_MB = 19
bot = Bot("8188098148:AAGwioCD56-NmmwCZau1RC6dZXnPOEQP6Fw")

# –°—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è fallback
MISTRAL_REQUEST_DELAY = 0.15  
last_mistral_request_time = 0


async def safe_send_notification(message, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits"""
    for attempt in range(max_retries):
        try:
            await bot.send_message(target_chat_id_test, message)
            return True
        except TelegramRetryAfter as e:
            if attempt < max_retries - 1:
                logger.warning(f"Rate limit hit, waiting {e.retry_after} seconds")
                await asyncio.sleep(e.retry_after)
            else:
                logger.error(f"Failed to send notification after {max_retries} attempts")
                return False
        except Exception as e:
            logger.error(f"Error sending notification: {e}")
            return False
    return False


async def fetch_posts(client_wrapper, id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AccountManager"""
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞, —á–∏—Å–ª–æ –∏–ª–∏ —Å–ø–∏—Å–æ–∫
    if isinstance(id, list):
        tb_ids = [str(i).strip() for i in id if str(i).strip()]  # –û—á–∏—â–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    else:
        tb_ids = [str(id).strip()] if str(id).strip() else []
    
    if not tb_ids:
        logger.error("No valid IDs provided for fetch_posts")
        return [], []
    
    async def _fetch_posts_operation():
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        all_sources = []
        all_stop_words = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
        for tb_id in tb_ids:
            try:
                tb = await repo.select_id(int(tb_id))
                if not tb:
                    logger.warning(f"No thematic block found with ID: {tb_id}")
                    continue
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –¢–ë (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫)
                if isinstance(tb, list):
                    for item in tb:
                        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                        raw_sources = item.source.split(",") if item.source else []
                        clean_sources = [s.strip() for s in raw_sources if s.strip()]
                        all_sources.extend(clean_sources)
                        
                        # –û—á–∏—â–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                        raw_stop_words = item.stop_words.split(",") if item.stop_words else []
                        clean_stop_words = [sw.strip() for sw in raw_stop_words if sw.strip()]
                        all_stop_words.extend(clean_stop_words)
                else:
                    # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    raw_sources = tb.source.split(",") if tb.source else []
                    clean_sources = [s.strip() for s in raw_sources if s.strip()]
                    all_sources.extend(clean_sources)
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                    raw_stop_words = tb.stop_words.split(",") if tb.stop_words else []
                    clean_stop_words = [sw.strip() for sw in raw_stop_words if sw.strip()]
                    all_stop_words.extend(clean_stop_words)
                    
            except Exception as e:
                logger.error(f"Error processing TB {tb_id}: {e}")
                continue

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤
        unique_sources = list(dict.fromkeys(all_sources))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        unique_stop_words = list(dict.fromkeys(all_stop_words))

        if not unique_sources:
            logger.warning(f"No valid sources found for TBs {tb_ids}")
            return [], unique_stop_words

        messages = []
        logger.info(f"Fetching posts from sources: {unique_sources} for TBs {tb_ids}")
        await account_manager.log_to_chat(f"üîç Fetching from {len(unique_sources)} sources for TBs {tb_ids}", "INFO")

        for source in unique_sources:
            count = 0
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
                channel = await client_wrapper.safe_get_entity(source)
                logger.info(f"Channel details: {channel}")
                
                # –ü–æ–ª—É—á–∞–µ–º time_back - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–∑ –≤—Å–µ—Ö –¢–ë
                max_time_back = 900  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 —á–∞—Å–æ–≤
                for tb_id in tb_ids:
                    try:
                        tb = await repo.select_id(int(tb_id))
                        if tb:
                            if isinstance(tb, list):
                                for item in tb:
                                    if hasattr(item, 'time_back') and item.time_back:
                                        max_time_back = max(max_time_back, item.time_back)
                            else:
                                if hasattr(tb, 'time_back') and tb.time_back:
                                    max_time_back = max(max_time_back, tb.time_back)
                    except:
                        continue
                    
                offset_date = datetime.now(timezone.utc) - timedelta(minutes=max_time_back)
                logger.info(f"Fetching messages from {source} with offset_date: {offset_date} (time_back: {max_time_back}min)")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                    async for message in client_wrapper.safe_iter_messages(
                        channel, 
                        reverse=True,
                        offset_date=offset_date,  
                        limit=50  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    ):
                        try:
                            if message.date < offset_date:
                                logger.debug(f"Message {message.id} from {source} is older than offset_date.")
                                continue

                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            if not message.text and not message.media:
                                logger.debug(f"Message {message.id} has no text or media, skipping")
                                continue

                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
                            if not message.text and message.media:
                                logger.info(f"Message {message.id} has media but no text, using media caption or placeholder")
                                # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å caption –º–µ–¥–∏–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                                if hasattr(message.media, 'caption') and message.media.caption:
                                    message.text = message.media.caption
                                else:
                                    message.text = "[–ú–µ–¥–∏–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è]"

                            # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–µ—Å—É –≤–∏–¥–µ–æ
                            if isinstance(message.media, MessageMediaDocument):
                                doc = message.media.document
                                is_video = any(isinstance(attr, DocumentAttributeVideo) for attr in doc.attributes)
                                if is_video:
                                    size_mb = doc.size / (1024 * 1024)
                                    if size_mb > MAX_VIDEO_SIZE_MB:
                                        logger.info(f"Skipped video {message.id} ({size_mb:.2f} MB) from {source} - exceeds {MAX_VIDEO_SIZE_MB} MB.")
                                        continue

                            messages.append(message)
                            count += 1
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª
                            if count >= 50:  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞
                                break
                                
                        except Exception as msg_error:
                            logger.warning(f"Error processing message from {source}: {msg_error}")
                            continue
                            
                except Exception as iter_error:
                    logger.error(f"Error iterating messages from {source}: {iter_error}")
                    raise iter_error  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ AccountManager

                logger.info(f"Fetched {count} messages from {source}")
                
            except Exception as e:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                if "Cannot find any entity corresponding to" in str(e) and ('""' in str(e) or source == ""):
                    logger.warning(f"Empty source detected, skipping: '{source}'")
                    continue
                    
                logger.error(f"Error fetching messages from {source}: {e}")
                raise e  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ AccountManager

        logger.info(f"Fetched {len(messages)} messages from all sources for TBs {tb_ids}.")
        return messages, unique_stop_words
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ AccountManager —Å retry –ª–æ–≥–∏–∫–æ–π
    result = await account_manager.execute_with_retry(
        client_wrapper, 
        _fetch_posts_operation
    )
    
    if result is None:
        # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        logger.warning(f"Failed to fetch posts for TB {id} after all retries")
        await account_manager.log_to_chat(f"‚ùå Failed to fetch posts for TB {id}", "ERROR")
        return [], []
    
    messages, s_w = result
    await account_manager.log_to_chat(f"üì• Fetched {len(messages)} messages from all sources for TB {id}", "SUCCESS")
    return messages, s_w


def AI(mess, retries=3, delay=1):
    global last_mistral_request_time
    
    logger.info(f"Starting AI analysis for message: {str(mess)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    current_time = time.time()
    time_since_last_request = current_time - last_mistral_request_time
    
    if time_since_last_request < MISTRAL_REQUEST_DELAY:
        wait_time = MISTRAL_REQUEST_DELAY - time_since_last_request
        logger.info(f"Waiting {wait_time:.1f} seconds before next Mistral request...")
        time.sleep(wait_time)
    
    for attempt in range(retries):
        try:
            logger.info(f"Sending request to Mistral (attempt {attempt + 1})...")
            
            chat_response = client_ai.agents.complete(
                agent_id="ag:55c24037:20241028:untitled-agent:701d2cd7",
                messages=[
                    {
                        "role": "user", 
                        "content": f"Rate relevance 0-1. Return only decimal number. No text, no explanations, no percentages.\n\n{mess}",
                    },
                ],
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            last_mistral_request_time = time.time()
            
            resp = chat_response.choices[0].message.content.strip()
            logger.info(f"AI raw response: {resp}")
            
            try:
                ratio = float(resp)
                
                if ratio > 1.0:
                    ratio = ratio / 100.0
                    logger.info(f"Normalized percentage to decimal: {ratio}")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
                ratio = max(0.0, min(1.0, ratio))
                
                logger.info(f"Final normalized ratio: {ratio}")
                return ratio
                
            except (ValueError, TypeError) as e:
                logger.error(f"Could not convert AI response to float: {resp}, error: {e}")
                return 0.0
            
        except Exception as e:
            logger.error(f"Error calculating similarity: {e}")
            if attempt < retries - 1:
                wait_time = delay * (2**attempt)
                logger.info(f"Waiting {wait_time} seconds before retry...")
                time.sleep(wait_time)
            else:
                logger.error(f"Max retries reached for message: {mess}")
                return 0.0


async def AI_distributed(theme_context, messages):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∞–≥–µ–Ω—Ç–∞–º"""
    try:
        results = await ai_manager.analyze_messages_distributed(messages, theme_context)
        return results
    except Exception as e:
        logger.error(f"Error in distributed AI analysis: {e}")
        return {}


async def get_all_matches(desc_objects, messages, ignore_duplicates=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–µ–º—ã –¢–ë"""
    
    copied_message_ids = set()
    if not ignore_duplicates:
        copied_message_ids = await repo_art.get_all_copied_message_ids()
        logger.info(f"Checking against {len(copied_message_ids)} previously copied messages")
    
    matches = []
    duplicate_count = 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    valid_messages = []
    for message in messages:
        if not message.text or message.text == "":
            logger.debug(f"Message text is None or empty for message ID: {message.id}")
            continue
        
        if not ignore_duplicates and message.id in copied_message_ids:
            duplicate_count += 1
            logger.debug(f"Message {message.id} skipped - already copied (duplicate #{duplicate_count})")
            continue
        
        valid_messages.append(message)
    
    if not valid_messages:
        logger.warning("No valid messages for analysis")
        await account_manager.log_to_chat("‚ö†Ô∏è No valid messages for AI analysis", "WARNING")
        return []
    
    logger.info(f"Analyzing {len(valid_messages)} valid messages with distributed AI")
    await account_manager.log_to_chat(f"ü§ñ Starting distributed AI analysis of {len(valid_messages)} messages", "INFO")

    theme_context_parts = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
    tb_objects = desc_objects if isinstance(desc_objects, list) else [desc_objects]
    
    for i, tb_obj in enumerate(tb_objects, 1):
        if len(tb_objects) > 1:
            theme_context_parts.append(f"--- –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö {i} ---")
        
    
        tb_context = format_thematic_block_context(tb_obj)
        theme_context_parts.append(tb_context)
        
        if len(tb_objects) > 1:
            theme_context_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¢–ë
    
    theme_context = "\n".join(theme_context_parts)
    
    logger.info(f"Theme context length: {len(theme_context)} chars")
    logger.debug(f"Theme context: {theme_context}...") 
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–µ–º—ã
    ai_results = await AI_distributed(theme_context, valid_messages)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for message in valid_messages:
        ratio = ai_results.get(message.id, 0.0)
        
        if ratio == 0.0:
            logger.debug(f"AI returned 0 for message ID: {message.id}")
            continue
        
        logger.info(f"Message {message.id} from chat {message.peer_id.channel_id} has ratio {ratio:.3f} ({ratio*100:.1f}%)")
        
        if ratio >= 0.85:
            matches.append({
                'message': message,
                'ratio': ratio,
                'chat': message.peer_id.channel_id
            })
            logger.info(f"‚úÖ Message {message.id} added to matches with {ratio:.3f} ({ratio*100:.1f}%)")
        else:
            logger.info(f"‚ùå Message {message.id} skipped - rating {ratio:.3f} ({ratio*100:.1f}%) < 85%")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    matches.sort(key=lambda x: x['ratio'], reverse=True)
    
    logger.info(f"Found {len(matches)} potential matches with rating >= 85%. Skipped {duplicate_count} duplicates.")
    await account_manager.log_to_chat(
        f"üéØ Found {len(matches)} matches (‚â•85%) | Skipped {duplicate_count} duplicates", 
        "SUCCESS" if matches else "WARNING"
    )
    return matches


async def copy_posts(
    client_wrapper, messages, target_chat_id, desc, stop_words, ignore_duplicates=False
):
    published = False
    attempts = 0
    max_attempts = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫
    
    logger.info(f"Starting copy_posts process with {len(messages)} messages")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
    if isinstance(desc, list):
        # –î–ª—è —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
        for item in desc:
            matches = await get_all_matches(item, messages, ignore_duplicates)
            
            for match in matches:
                if attempts >= max_attempts:
                    logger.warning(f"Reached maximum attempts ({max_attempts})")
                    await account_manager.log_to_chat(f"‚ö†Ô∏è Reached max attempts ({max_attempts})", "WARNING")
                    break  
                    
                if match['ratio'] >= 0.85:  
                    attempts += 1
                    success = await try_publish_message(
                        client_wrapper, match, target_chat_id, stop_words, attempts
                    )
                    if success:
                        published = True
                        break  # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        
            if published or attempts >= max_attempts: 
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
    else:
        # –û–¥–∏–Ω —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
        matches = await get_all_matches(desc, messages, ignore_duplicates)
        
        for match in matches:
            if attempts >= max_attempts:
                logger.warning(f"Reached maximum attempts ({max_attempts})")
                await account_manager.log_to_chat(f"‚ö†Ô∏è Reached max attempts ({max_attempts})", "WARNING")
                break  
                
            if match['ratio'] >= 0.85:  # –°–¢–†–û–ì–û 85% –∏ –≤—ã—à–µ
                attempts += 1
                success = await try_publish_message(
                    client_wrapper, match, target_chat_id, stop_words, attempts
                )
                if success:
                    published = True
                    break  
    
    
    if published:
        logger.info(f"Successfully published message after {attempts} attempts")
        await account_manager.log_to_chat(f"‚úÖ Successfully published after {attempts} attempts", "SUCCESS")
    elif attempts >= max_attempts:
        logger.error(f"Failed to publish: reached maximum attempts ({max_attempts})")
        await account_manager.log_to_chat(f"‚ùå Publication failed: max attempts reached ({max_attempts})", "ERROR")
    else:
        logger.warning(f"No suitable messages found for publication with rating >= 85% after {attempts} attempts")
        await account_manager.log_to_chat(f"‚ö†Ô∏è No suitable messages found after {attempts} attempts", "WARNING")
    
    return published


async def try_publish_message(client_wrapper, match, target_chat_id, stop_words, attempt_num):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ"""
    message_id = match['message'].id
    try:
        logger.info(f"Attempt {attempt_num}: Publishing message {message_id} with ratio {match['ratio']:.3f} ({match['ratio']*100:.1f}%)")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        safe_client = await client_wrapper.get_current_client_safe()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await main_rer(match['message'], target_chat_id, safe_client, stop_words)
        
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if success:
            await repo_art.add(message_id, match['chat'], match['message'].text, datetime.now())
            logger.info(f"Successfully published message {message_id} to {target_chat_id}")
            await account_manager.log_to_chat(f"‚úÖ Published message {message_id} with {match['ratio']:.3f} ratio", "SUCCESS")
            return True
        else:
            logger.warning(f"Message {message_id} was filtered out, trying next message")
            return False
            
    except Exception as e:
        logger.error(f"Error publishing message {message_id}: {e}")
        await account_manager.log_to_chat(f"‚ùå Publish error for {message_id}: {str(e)[:200]}", "ERROR")
        return False


async def main(id, ignore_duplicates=False):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        display_id = id if not isinstance(id, list) else f"[{','.join(map(str, id))}]"
        logger.info(f"Starting main function for thematic block(s) ID: {display_id}")
        await account_manager.log_to_chat(f"üöÄ Starting TB {display_id} processing", "INFO")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º client_wrapper –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É
        messages, s_w = await fetch_posts(telegramClient, id)
        
        if not messages:
            logger.warning(f"No messages found for thematic block(s) ID: {display_id}")
            await account_manager.log_to_chat(f"‚ö†Ô∏è No messages found for TB {display_id}", "WARNING")
            return False 
            
        logger.info(f"Found {len(messages)} messages, processing...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤
        tb_descriptions = []
        tb_ids = id if isinstance(id, list) else [id]
        
        for tb_id in tb_ids:
            try:
                tb_desc = await repo.select_id(int(str(tb_id).strip()))
                if tb_desc:
                    if isinstance(tb_desc, list):
                        tb_descriptions.extend(tb_desc)
                    else:
                        tb_descriptions.append(tb_desc)
            except Exception as e:
                logger.error(f"Error getting description for TB {tb_id}: {e}")
                continue
        
        if not tb_descriptions:
            logger.warning(f"No valid descriptions found for TB {display_id}")
            await account_manager.log_to_chat(f"‚ö†Ô∏è No descriptions found for TB {display_id}", "WARNING")
            return False  
        
        
        publication_result = await copy_posts(
            telegramClient,
            messages,
            get_target_chat_id(),  
            tb_descriptions,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è
            s_w,
            ignore_duplicates,
        )
        
        if publication_result:
            logger.info(f"Successfully processed thematic block(s) ID: {display_id}")
            await account_manager.log_to_chat(f"‚úÖ Completed TB {display_id} processing", "SUCCESS")
        else:
            logger.warning(f"Failed to process thematic block(s) ID: {display_id}")
            await account_manager.log_to_chat(f"‚ùå Failed to complete TB {display_id} processing", "ERROR")
        
        return publication_result  
        
    except Exception as e:
        display_id = id if not isinstance(id, list) else f"[{','.join(map(str, id))}]"
        logger.error(f"Error in main function for thematic block(s) ID {display_id}: {e}")
        await account_manager.log_to_chat(f"‚ùå TB {display_id} error: {str(e)[:200]}", "ERROR")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False  


async def publish_article(article):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞"""
    try:
        logger.info(f"Publishing individual article ID: {article.id}")
        await account_manager.log_to_chat(f"üìù Publishing individual article {article.id}", "INFO")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        safe_client = await telegramClient.get_current_client_safe()
        
        if article.media:
            logger.info(f"Article {article.id} has media: {article.media[:20]}...")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if article.media.startswith("AgAC"):  # –§–æ—Ç–æ
                await safe_client.send_file(
                    get_target_chat_id(), 
                    article.media,
                    caption=article.text
                )
                logger.info(f"Sent article {article.id} as photo")
            elif article.media.startswith("BAAC"):  # –í–∏–¥–µ–æ
                await safe_client.send_file(
                    get_target_chat_id(),  
                    article.media,
                    caption=article.text
                )
                logger.info(f"Sent article {article.id} as video")
            else:
                # –ï—Å–ª–∏ —Ç–∏–ø –º–µ–¥–∏–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await safe_client.send_message(
                    get_target_chat_id(),  
                    article.text
                )
                logger.warning(f"Unknown media type for article {article.id}, sent as text")
        else:
            await safe_client.send_message(
                get_target_chat_id(),  
                article.text
            )
            logger.info(f"Sent article {article.id} as text-only")
            
        await account_manager.log_to_chat(f"‚úÖ Published individual article {article.id}", "SUCCESS")
        logger.info(f"Successfully published article ID: {article.id}")
            
    except Exception as e:
        logger.error(f"Error publishing article: {e}")
        await account_manager.log_to_chat(f"‚ùå Article {article.id} error: {str(e)[:200]}", "ERROR")
        
        try:
            safe_client = await telegramClient.get_current_client_safe()
            await safe_client.send_message(
                get_target_chat_id(),  
                article.text
            )
            logger.info(f"Published article ID: {article.id} as text-only after media error")
            await account_manager.log_to_chat(f"üìù Article {article.id} sent as fallback text", "SUCCESS")
        except Exception as e2:
            logger.error(f"Error sending text-only message: {e2}")
            await account_manager.log_to_chat(f"‚ùå Article {article.id} complete failure: {str(e2)[:200]}", "ERROR")


async def update_target_chat_id():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç target_chat_id –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    reload_settings()
    logger.info(f"Updated target_chat_id to: {get_target_chat_id()}")
    await account_manager.log_to_chat(f"üîÑ Target chat updated to: {get_target_chat_id()}", "INFO")


async def initialize_ai_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Manager"""
    try:
        logger.info("Initializing AI Manager...")
        success = await ai_manager.initialize()
        if success:
            logger.info("AI Manager initialized successfully")
            await account_manager.log_to_chat("ü§ñ AI Manager initialized with distributed processing", "SUCCESS")
        else:
            logger.error("Failed to initialize AI Manager")
            await account_manager.log_to_chat("‚ùå Failed to initialize AI Manager", "ERROR")
        return success
    except Exception as e:
        logger.error(f"Error initializing AI Manager: {e}")
        await account_manager.log_to_chat(f"‚ùå AI Manager error: {str(e)[:200]}", "ERROR")
        return False
